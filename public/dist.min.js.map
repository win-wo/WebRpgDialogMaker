{"version":3,"sources":["app.js","data/nofiticationRepository.js","edit/editPageController.js","notifications/notificationsController.js","toolbar/toolbarController.js"],"names":["app","angular","module","Data","config","$compileProvider","aHrefSanitizationWhitelist","$routeProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","AppController","vm","this","appName","chapter","NofiticationRepository","notifications","add","type","message","push","remove","index","splice","EditPageController","$location","generateGuid","guid","replace","c","r","Math","random","v","toString","getFromStorage","JSON","parse","localStorage","saveToStorage","stringify","loadDataAsChapter","data","isChapterValid","error","Error","id","name","number","language","dialogs","dialogModal","dialog","file","exportedData","showDialogModal","copy","$","modal","saveDialog","newDialog","_","findIndex","selectDialog","updateDialogWindowVisible","deleteDialog","demoDialog","importData","element","files","reader","FileReader","onload","e","result","readAsText","exportData","encodeURIComponent","$inject","NotificationsController","removeNotification","ToolbarController"],"mappings":"AAAAA,IAAAC,QAAAC,OAAA,qBAAA,YACAF,IAAAG,QACAH,IAAAI,QAAA,mBAAA,SAAAC,GACAA,EAAAC,2BAAA,yCAGAN,IAAAI,QAAA,iBACA,SAAAG,GACAA,EACAC,KAAA,SACAC,YAAA,kCACAC,WAAA,qBACAC,aAAA,aAEAC,WACAC,WAAA,aAIA,WAGA,QAAAC,KACA,GAAAC,GAAAC,IACAD,GAAAE,QAAA,iBAEAF,EAAAG,QANAlB,IAAAU,WAAA,gBAAAI,MCpBA,WAGA,QAAAK,KACAH,KAAAI,iBACAJ,KAAAK,IAAA,SAAAC,EAAAC,GACAP,KAAAI,cAAAI,MACAF,KAAAA,EACAC,QAAAA,KAGAP,KAAAS,OAAA,SAAAC,GACAV,KAAAI,cAAAO,UAXA3B,IAAAG,KAAAgB,uBAAA,GAAAA,MCDA,WAIA,QAAAS,GAAAC,GA0EA,QAAAC,KACA,GAAAC,GAAA,uCAAAC,QAAA,QAAA,SAAAC,GACA,GAAAC,GAAA,GAAAC,KAAAC,SAAA,EAAAC,EAAA,KAAAJ,EAAAC,EAAA,EAAAA,EAAA,CACA,OAAAG,GAAAC,SAAA,KAEA,OAAAP,GAEA,QAAAQ,KACA,MAAAC,MAAAC,MAAAC,aAAAxB,SAEA,QAAAyB,KACAD,aAAAxB,QAAAsB,KAAAI,UAAA7B,EAAAG,SAEA,QAAA2B,GAAAC,GACA,IACA,GAAA5B,GAAAsB,KAAAC,MAAAK,EAEAC,GAAA7B,GACAwB,aAAAxB,QAAA4B,EAEA,MAAAE,GACAhD,IAAAG,KAAAgB,uBAAAE,IAAA,SAAA,oCAGA,QAAA0B,GAAA7B,GACA,IAAAA,EAAA,KAAA,IAAA+B,OAAA,kBACA,KAAA/B,EAAAgC,GAAA,KAAA,IAAAD,OAAA,aACA,KAAA/B,EAAAiC,KAAA,KAAA,IAAAF,OAAA,eACA,KAAA/B,EAAAkC,OAAA,KAAA,IAAAH,OAAA,iBACA,KAAA/B,EAAAmC,SAAA,KAAA,IAAAJ,OAAA,mBACA,KAAA/B,EAAAoC,QAAA,KAAA,IAAAL,OAAA,mBAvGA,GAAAlC,GAAAC,IAEAD,GAAAG,QAAAqB,MACAW,GAAA,KACAC,KAAA,KACAC,OAAA,KACAC,SAAA,KACAC,YAEAvC,EAAAwC,aACAL,GAAA,eACAM,WAGAzC,EAAA0C,KAAA,KACA1C,EAAA2C,aAAA,KAEA3C,EAAA4C,gBAAA,SAAAH,GACAvD,QAAA2D,KAAAJ,EAAAzC,EAAAwC,YAAAC,QACAK,EAAA9C,EAAAwC,YAAAL,IAAAY,SAGA/C,EAAAgD,WAAA,SAAAP,GACA,GAAAQ,KACA/D,SAAA2D,KAAAJ,EAAAQ,GAEAA,EAAAd,GAAAc,EAAAd,IAAApB,GAEA,IAAAJ,GAAAuC,EAAAC,UAAAnD,EAAAG,QAAAoC,SAAAJ,GAAAc,EAAAd,IAEA,KAAAxB,EACAX,EAAAG,QAAAoC,QAAA5B,GAAAsC,EAGAjD,EAAAG,QAAAoC,QAAA9B,KAAAwC,GAGAH,EAAA9C,EAAAwC,YAAAL,IAAAY,MAAA,SAEA/C,EAAAoD,aAAA,SAAAX,GACAzC,EAAAqD,0BACAnE,QAAA2D,KAAAJ,EAAAzC,EAAAwC,YAAAC,SAEAzC,EAAAsD,aAAA,SAAAb,GACAS,EAAAxC,OAAAV,EAAAG,QAAAoC,SAAAJ,GAAAM,EAAAN,MAEAnC,EAAAuD,WAAA,SAAAd,KAGAzC,EAAA4B,cAAA,WACAA,KAEA5B,EAAAwD,WAAA,WACA,GAAAC,GAAAvE,QAAAuE,QAAA,wBAAA,GACAf,EAAAe,EAAAC,MAAA,GACAC,EAAA,GAAAC,WAEAD,GAAAE,OAAA,SAAAC,GACAhC,EAAA6B,EAAAI,SAGAJ,EAAAK,WAAAtB,IAEA1C,EAAAiE,WAAA,WACA,IACAtC,aAAAxB,UACAH,EAAA2C,aAAAuB,mBAAAzC,KAAAI,UAAAF,aAAAxB,WAEA,MAAA8B,GACAhD,IAAAG,KAAAgB,uBAAAE,IAAA,SAAA,0BAzEArB,IAAAU,WAAA,qBAAAkB,GACAA,EAAAsD,SAAA,gBCFA,WAGA,QAAAC,KACA,GAAApE,GAAAC,IAEAD,GAAAK,cAAApB,IAAAG,KAAAgB,uBAAAC,cACApB,IAAAG,KAAAgB,uBAAAE,IAAA,UAAA,QACAN,EAAAqE,mBAAA,SAAA1D,GACA1B,IAAAG,KAAAgB,uBAAAM,OAAAC,IARA1B,IAAAU,WAAA,0BAAAyE,MCDA,WAGA,QAAAE,MAFArF,IAAAU,WAAA,oBAAA2E","file":"dist.min.js","sourcesContent":["app = angular.module(\"WebRpgDialogMaker\", [\"ngRoute\"]);\r\napp.Data = {};\r\napp.config(['$compileProvider', function ($compileProvider) {\r\n    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|file|data):/);\r\n}]);\r\n\r\napp.config(['$routeProvider',\r\n    function ($routeProvider) {\r\n        $routeProvider.\r\n            when('/edit', {\r\n                templateUrl: 'public/services/edit/index.html',\r\n                controller: 'EditPageController',\r\n                controllerAs: 'EditPage'\r\n            }).\r\n            otherwise({\r\n                redirectTo: '/edit'\r\n            });\r\n    }]);\r\n\r\n(function () {\r\n    app.controller(\"AppController\", AppController);\r\n\r\n    function AppController() {\r\n        var vm = this;\r\n        vm.appName = \"Project Chaptr\";\r\n        \r\n        vm.chapter\r\n    }\r\n})();","(function () {\r\n    app.Data.NofiticationRepository = new NofiticationRepository();\r\n    \r\n    function NofiticationRepository(){\r\n        this.notifications = [],\r\n        this.add = function (type, message) {\r\n            this.notifications.push({\r\n                type: type,\r\n                message: message\r\n            });\r\n        },\r\n        this.remove =  function(index) {\r\n            this.notifications.splice();\r\n        }\r\n    }\r\n})();","(function () {\r\n    app.controller(\"EditPageController\", EditPageController);\r\n    EditPageController.$inject = [\"$location\"];\r\n    \r\n    function EditPageController($location) {\r\n        var vm = this;\r\n        //dialogs\r\n        vm.chapter = getFromStorage() || {\r\n            id : null,\r\n            name : null,\r\n            number : null,\r\n            language : null,\r\n            dialogs : []\r\n        };\r\n        vm.dialogModal = {\r\n            id : \"#dialogModal\",\r\n            dialog : {},\r\n        };\r\n        //export/import\r\n        vm.file = null;\r\n        vm.exportedData = null;\r\n        \r\n        vm.showDialogModal = function(dialog){\r\n            angular.copy(dialog, vm.dialogModal.dialog);\r\n            $(vm.dialogModal.id).modal();\r\n        }\r\n        \r\n        vm.saveDialog = function(dialog){    \r\n            var newDialog = {};\r\n            angular.copy(dialog, newDialog);\r\n                    \r\n            newDialog.id = newDialog.id || generateGuid();\r\n            \r\n            var index = _.findIndex(vm.chapter.dialogs, {id : newDialog.id});\r\n            \r\n            if(index != -1){\r\n                vm.chapter.dialogs[index] = newDialog;    \r\n            }\r\n            else{\r\n                vm.chapter.dialogs.push(newDialog);\r\n            }\r\n            \r\n            $(vm.dialogModal.id).modal(\"hide\");\r\n        }\r\n        vm.selectDialog = function(dialog){\r\n            vm.updateDialogWindowVisible\r\n            angular.copy(dialog, vm.dialogModal.dialog);\r\n        }\r\n        vm.deleteDialog = function(dialog){\r\n            _.remove(vm.chapter.dialogs, {id : dialog.id});\r\n        }\r\n        vm.demoDialog = function(dialog){\r\n            \r\n        }\r\n        vm.saveToStorage = function(){\r\n            saveToStorage();\r\n        }\r\n        vm.importData = function () {\r\n            var element = angular.element(\"#toolbar-file-import\")[0];\r\n            var file = element.files[0];\r\n            var reader = new FileReader();\r\n\r\n            reader.onload = function (e) {\r\n                loadDataAsChapter(reader.result);\r\n            };\r\n\r\n            reader.readAsText(file);\r\n        }\r\n        vm.exportData = function () {\r\n            try {\r\n                if (localStorage.chapter) {\r\n                    vm.exportedData = encodeURIComponent(JSON.stringify(localStorage.chapter));\r\n                }\r\n            } catch (error) {\r\n                app.Data.NofiticationRepository.add(\"danger\", \"No chapter to export\");\r\n            }\r\n        }\r\n        \r\n        function generateGuid(){\r\n            var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\r\n                return v.toString(16);\r\n            });\r\n            return guid;\r\n        }\r\n        function getFromStorage(){\r\n            return JSON.parse(localStorage.chapter);\r\n        }\r\n        function saveToStorage(){\r\n            localStorage.chapter = JSON.stringify(vm.chapter);\r\n        }\r\n        function loadDataAsChapter(data) {\r\n            try {\r\n                var chapter = JSON.parse(data);\r\n\r\n                isChapterValid(chapter);\r\n                localStorage.chapter = data;\r\n                \r\n            } catch (error) {\r\n                app.Data.NofiticationRepository.add(\"danger\", \"Data is not readable or invalid\");\r\n            }\r\n        }\r\n        function isChapterValid(chapter) {\r\n            if (!chapter) throw new Error(\"Chapter is null\");\r\n            if (!chapter.id) throw new Error(\"Missing id\");\r\n            if (!chapter.name) throw new Error(\"Missing name\");\r\n            if (!chapter.number) throw new Error(\"Missing number\");\r\n            if (!chapter.language) throw new Error(\"Missing language\");\r\n            if (!chapter.dialogs) throw new Error(\"Missing dialogs\");\r\n        }\r\n    }\r\n})();","(function () {\r\n    app.controller(\"NotificationsController\", NotificationsController);\r\n\r\n    function NotificationsController() {\r\n        var vm = this;\r\n\r\n        vm.notifications = app.Data.NofiticationRepository.notifications;\r\n        app.Data.NofiticationRepository.add(\"success\", \"YEAH\");\r\n        vm.removeNotification = function (index) {\r\n            app.Data.NofiticationRepository.remove(index);\r\n        }\r\n    }\r\n})();\r\n\r\n","(function () {\r\n    app.controller(\"ToolbarController\", ToolbarController);\r\n    \r\n    function ToolbarController() {\r\n        var vm = this;\r\n       \r\n    }\r\n})();"],"sourceRoot":"/source/"}