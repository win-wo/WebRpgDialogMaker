{"version":3,"sources":["app.js","data/nofiticationRepository.js","edit/editPageController.js","demo/demoPageController.js","manage/managePageController.js","models/dialogModel.js"],"names":["app","angular","module","Data","config","$compileProvider","aHrefSanitizationWhitelist","$routeProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","AppController","vm","this","appName","notifications","NofiticationRepository","add","removeNotification","index","remove","type","message","push","splice","EditPageController","$location","DialogModel","generateGuid","guid","replace","c","r","Math","random","v","toString","getFromStorage","JSON","parse","localStorage","chapter","saveToStorage","stringify","newDialog","id","name","number","language","dialogs","addNewDialog","dialog","saveDialog","_","findIndex","selectDialog","deleteDialog","runDialog","path","$inject","DemoPageController","ManagePageController","loadDataAsChapter","data","isChapterValid","error","Error","file","exportedData","importData","element","files","reader","FileReader","onload","e","result","readAsText","exportData","encodeURIComponent","factory"],"mappings":"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","file":"dist.min.js","sourcesContent":["app = angular.module(\"WebRpgDialogMaker\", [\"ngRoute\"]);\r\napp.Data = {};\r\napp.config(['$compileProvider', function ($compileProvider) {\r\n    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|file|data):/);\r\n}]);\r\n\r\napp.config(['$routeProvider',\r\n    function ($routeProvider) {\r\n        $routeProvider.\r\n            when('/manage', {\r\n                templateUrl: 'public/services/manage/index.html',\r\n                controller: 'ManagePageController',\r\n                controllerAs: 'ManagePage'\r\n            }).\r\n            when('/edit/', {\r\n                templateUrl: 'public/services/edit/index.html',\r\n                controller: 'EditPageController',\r\n                controllerAs: 'EditPage'\r\n            }).\r\n            when('/demo/:dialogId', {\r\n                templateUrl: 'public/services/demo/index.html',\r\n                controller: 'DemoPageController',\r\n                controllerAs: 'DemoPage'\r\n            }).\r\n            otherwise({\r\n                redirectTo: '/manage'\r\n            });\r\n    }]);\r\n\r\n(function () {\r\n    app.controller(\"AppController\", AppController);\r\n\r\n    function AppController() {\r\n        var vm = this;\r\n        vm.appName = \"Project Chaptr\";\r\n        debugger;\r\n        vm.notifications = app.Data.NofiticationRepository.notifications;\r\n        app.Data.NofiticationRepository.add(\"success\", \"YEAH\");\r\n        vm.removeNotification = function(index){\r\n            app.Data.NofiticationRepository.remove(index);\r\n        }\r\n    }\r\n})();","(function () {\r\n    app.Data.NofiticationRepository = new NofiticationRepository();\r\n    \r\n    function NofiticationRepository(){\r\n        this.notifications = [],\r\n        this.add = function (type, message) {\r\n            debugger;\r\n            this.notifications.push({\r\n                type: type,\r\n                message: message\r\n            });\r\n        },\r\n        this.remove =  function(index) {\r\n            this.notifications.splice();\r\n        }\r\n    }\r\n})();","(function () {\r\n    app.controller(\"EditPageController\", EditPageController);\r\n    EditPageController.$inject = [\"$location\",\"DialogModel\"];\r\n    \r\n    function EditPageController($location, DialogModel) {\r\n        var vm = this;\r\n        vm.newDialog = {};\r\n        \r\n        vm.chapter = getFromStorage() || {\r\n            id : null,\r\n            name : null,\r\n            number : null,\r\n            language : null,\r\n            dialogs : []\r\n        };\r\n        \r\n        vm.addNewDialog = function(){\r\n            var dialog = new DialogModel();\r\n            \r\n            dialog.id = generateGuid();\r\n            dialog.name = vm.newDialog.name;\r\n            dialog.number = vm.newDialog.number;\r\n            dialog.language = vm.newDialog.language;\r\n            \r\n            vm.chapter.dialogs.push(dialog);\r\n            vm.newDialog = {};\r\n        }   \r\n             \r\n        vm.saveDialog = function(){\r\n            var dialog = new DialogModel();\r\n            \r\n            dialog.id = vm.newDialog.id;\r\n            dialog.name = vm.newDialog.name;\r\n            dialog.number = vm.newDialog.number;\r\n            dialog.language = vm.newDialog.language;\r\n            \r\n            var index = _.findIndex(vm.chapter.dialogs, {id : dialog.id});\r\n            if(index != -1){\r\n                vm.chapter.dialogs[index] = dialog;    \r\n            }\r\n        }\r\n        \r\n        vm.selectDialog = function(dialog){\r\n            vm.newDialog = dialog;\r\n        }\r\n        vm.deleteDialog = function(dialog){\r\n            _.remove(vm.chapter.dialogs, {id : dialog.id});\r\n        }\r\n        vm.runDialog = function(dialog){\r\n            $location.path(\"/demo/\" + dialog.id);\r\n        }\r\n        vm.saveToStorage = function(){\r\n            saveToStorage();\r\n        }\r\n        \r\n        function generateGuid(){\r\n            var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\r\n                return v.toString(16);\r\n            });\r\n            return guid;\r\n        }\r\n        \r\n        function getFromStorage(){\r\n            return JSON.parse(localStorage.chapter);\r\n        }\r\n        \r\n        function saveToStorage(){\r\n            localStorage.chapter = JSON.stringify(vm.chapter);\r\n        }\r\n    }\r\n})();","(function () {\r\n    app.controller(\"DemoPageController\", DemoPageController);\r\n\r\n    function DemoPageController() {\r\n        var vm = this;\r\n    }\r\n})();","(function () {\r\n    app.controller(\"ManagePageController\", ManagePageController);\r\n    \r\n    function ManagePageController() {\r\n        var vm = this;\r\n        vm.file = null;\r\n        vm.exportedData = null;\r\n\r\n        vm.importData = function () {\r\n            var element = angular.element(\"#manage-page-file-import\")[0];\r\n            var file = element.files[0];\r\n            var reader = new FileReader();\r\n\r\n            reader.onload = function (e) {\r\n                loadDataAsChapter(reader.result);\r\n            };\r\n\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        vm.exportData = function () {\r\n            try {\r\n                if (localStorage.chapter) {\r\n                    vm.exportedData = encodeURIComponent(JSON.stringify(localStorage.chapter));\r\n                }\r\n            } catch (error) {\r\n                app.Data.NofiticationRepository.add(\"danger\", \"No chapter to export\");\r\n            }\r\n        }\r\n\r\n        function loadDataAsChapter(data) {\r\n            try {\r\n                var chapter = JSON.parse(data);\r\n\r\n                isChapterValid(chapter);\r\n                localStorage.chapter = data;\r\n                \r\n            } catch (error) {\r\n                app.Data.NofiticationRepository.add(\"danger\", \"Data is not readable or invalid\");\r\n            }\r\n        }\r\n\r\n        function isChapterValid(chapter) {\r\n            if (!chapter) throw new Error(\"Chapter is null\");\r\n            if (!chapter.id) throw new Error(\"Missing id\");\r\n            if (!chapter.name) throw new Error(\"Missing name\");\r\n            if (!chapter.number) throw new Error(\"Missing number\");\r\n            if (!chapter.language) throw new Error(\"Missing language\");\r\n            if (!chapter.dialogs) throw new Error(\"Missing dialogs\");\r\n        }\r\n    }\r\n})();","(function () {\r\n    app.factory(\"DialogModel\", function () { return DialogModel })\r\n\r\n    function DialogModel() {\r\n        this.id = null;\r\n        this.name = null;\r\n        this.number = null;\r\n        this.language = null;\r\n    }\r\n})();"],"sourceRoot":"/source/"}