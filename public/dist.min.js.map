{"version":3,"sources":["app.js","data/notifications.js","edit/editPageController.js","notifications/notificationsController.js","toolbar/toolbarController.js"],"names":["app","angular","module","Data","config","$compileProvider","aHrefSanitizationWhitelist","$routeProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","AppController","vm","this","appName","chapter","factory","Notifications","list","add","type","message","push","EditPageController","$location","generateGuid","guid","replace","c","r","Math","random","v","toString","getFromStorage","JSON","parse","localStorage","error","saveToStorage","stringify","loadDataAsChapter","data","isChapterValid","Error","id","name","number","language","dialogs","dialogModal","dialog","file","serializedChapterForExport","serializedChapterForVisualisation","showDialogModal","copy","$","modal","saveDialog","newDialog","index","_","findIndex","selectDialog","updateDialogWindowVisible","deleteDialog","remove","demoDialog","importChapter","element","files","length","reader","FileReader","onload","e","result","readAsText","exportChapter","encodeURIComponent","resetChapter","updateSerializedChapterForVisualisation","undefined","$inject","NotificationsController","notifications","removeNotification","splice","ToolbarController"],"mappings":"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","file":"dist.min.js","sourcesContent":["app = angular.module(\"WebRpgDialogMaker\", [\"ngRoute\"]);\r\napp.Data = {};\r\napp.config(['$compileProvider', function ($compileProvider) {\r\n    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|file|data):/);\r\n}]);\r\n\r\napp.config(['$routeProvider',\r\n    function ($routeProvider) {\r\n        $routeProvider.\r\n            when('/edit', {\r\n                templateUrl: 'public/services/edit/index.html',\r\n                controller: 'EditPageController',\r\n                controllerAs: 'EditPage'\r\n            }).\r\n            otherwise({\r\n                redirectTo: '/edit'\r\n            });\r\n    }]);\r\n\r\n(function () {\r\n    app.controller(\"AppController\", AppController);\r\n\r\n    function AppController() {\r\n        var vm = this;\r\n        vm.appName = \"Project Chaptr\";\r\n        \r\n        vm.chapter\r\n    }\r\n})();","app.factory('Notifications', function(){\r\n  var Notifications = {};\r\n\r\n  Notifications.list = [];\r\n\r\n  Notifications.add = function(type, message){\r\n    Notifications.list.push({\r\n        type : type,\r\n        message : message\r\n    });\r\n  };\r\n\r\n  return Notifications;\r\n});","(function () {\r\n    app.controller(\"EditPageController\", EditPageController);\r\n    EditPageController.$inject = [\"$location\", \"Notifications\"];\r\n\r\n    function EditPageController($location, Notifications) {\r\n        var vm = this;\r\n        //dialogs\r\n        vm.chapter = getFromStorage() || {\r\n            id: generateGuid(),\r\n            name: null,\r\n            number: null,\r\n            language: null,\r\n            dialogs: []\r\n        };\r\n        vm.dialogModal = {\r\n            id: \"#dialogModal\",\r\n            dialog: {},\r\n        };\r\n        //export/import\r\n        vm.file = null;\r\n        vm.serializedChapterForExport = null;        \r\n        vm.serializedChapterForVisualisation = null;\r\n        //Dialogs\r\n        vm.showDialogModal = function (dialog) {\r\n            angular.copy(dialog, vm.dialogModal.dialog);\r\n            $(vm.dialogModal.id).modal();\r\n        }\r\n\r\n        vm.saveDialog = function (dialog) {\r\n            var newDialog = {};\r\n            angular.copy(dialog, newDialog);\r\n\r\n            newDialog.id = newDialog.id || generateGuid();\r\n\r\n            var index = _.findIndex(vm.chapter.dialogs, { id: newDialog.id });\r\n\r\n            if (index != -1) {\r\n                vm.chapter.dialogs[index] = newDialog;\r\n            }\r\n            else {\r\n                vm.chapter.dialogs.push(newDialog);\r\n            }\r\n\r\n            $(vm.dialogModal.id).modal(\"hide\");\r\n        }\r\n        vm.selectDialog = function (dialog) {\r\n            vm.updateDialogWindowVisible\r\n            angular.copy(dialog, vm.dialogModal.dialog);\r\n        }\r\n        vm.deleteDialog = function (dialog) {\r\n            _.remove(vm.chapter.dialogs, { id: dialog.id });\r\n        }\r\n        vm.demoDialog = function (dialog) {\r\n\r\n        }\r\n        //Import Export\r\n        vm.saveToStorage = function () {\r\n            saveToStorage();\r\n        }\r\n        vm.importChapter = function () {\r\n            try {\r\n                var element = angular.element(\"#toolbar-file-import\")[0];\r\n                if (element.files.length == 0) throw new Error(\"No file selected\");\r\n                var file = element.files[0];\r\n                var reader = new FileReader();\r\n\r\n                reader.onload = function (e) {\r\n                    loadDataAsChapter(reader.result);\r\n                };\r\n\r\n                reader.readAsText(file);\r\n            } catch (error) {\r\n                Notifications.add(\"danger\", \"Impossible to import : \" + error.message);\r\n            }\r\n        }\r\n        vm.exportChapter = function () {\r\n            try {\r\n                if (localStorage.chapter) {\r\n                    vm.serializedChapterForExport = encodeURIComponent(JSON.stringify(localStorage.chapter));\r\n                }\r\n            } catch (error) {\r\n                Notifications.add(\"danger\", \"Impossible to export, please save your data first\");\r\n            }\r\n        }\r\n        vm.resetChapter = function(){\r\n            vm.chapter = {};\r\n        }\r\n        vm.updateSerializedChapterForVisualisation = function () {\r\n            vm.serializedChapterForVisualisation = JSON.stringify(vm.chapter, undefined, 2);\r\n        }\r\n\r\n        function generateGuid() {\r\n            var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n                return v.toString(16);\r\n            });\r\n            return guid;\r\n        }\r\n        function getFromStorage() {\r\n            try {\r\n                return JSON.parse(localStorage.chapter);\r\n            } catch (error) {\r\n                return null;\r\n            }\r\n        }\r\n        function saveToStorage() {\r\n            localStorage.chapter = JSON.stringify(vm.chapter);\r\n        }\r\n        function loadDataAsChapter(data) {\r\n            try {\r\n                var chapter = JSON.parse(JSON.parse(data));\r\n\r\n                isChapterValid(chapter);\r\n                localStorage.chapter = data;\r\n            } catch (error) {\r\n                Notifications.add(\"danger\", \"File is not valid : \" + error.message);\r\n            }\r\n        }\r\n        function isChapterValid(chapter) {\r\n            if (!chapter) throw new Error(\"Chapter is null\");\r\n            if (!chapter.id) throw new Error(\"Missing id\");\r\n            if (!chapter.name) throw new Error(\"Missing name\");\r\n            if (!chapter.number) throw new Error(\"Missing number\");\r\n            if (!chapter.language) throw new Error(\"Missing language\");\r\n            if (!chapter.dialogs) throw new Error(\"Missing dialogs\");\r\n        }\r\n    }\r\n})();","(function () {\r\n    app.controller(\"NotificationsController\", NotificationsController);\r\n    NotificationsController.$inject = [\"Notifications\"]\r\n    function NotificationsController(Notifications) {\r\n        var vm = this;\r\n\r\n        vm.notifications = Notifications.list;\r\n        \r\n        vm.removeNotification = function (index) {\r\n            vm.notifications.splice(index, 1);\r\n        }\r\n    }\r\n})();\r\n\r\n","(function () {\r\n    app.controller(\"ToolbarController\", ToolbarController);\r\n    \r\n    function ToolbarController() {\r\n        var vm = this;\r\n       \r\n    }\r\n})();"],"sourceRoot":"/source/"}