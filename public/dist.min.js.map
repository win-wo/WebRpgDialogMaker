{"version":3,"sources":["app.js","chapters/chapter.js","chapters/manageChapterController.js","data/notifications.js","notifications/notificationsController.js","utils/guid.js","utils/slug.js","toolbar/toolbarController.js"],"names":["app","angular","module","config","$compileProvider","aHrefSanitizationWhitelist","$routeProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","AppController","vm","this","appName","Data","Models","Utils","Chapter","data","DataContructor","Constructor","prototype","id","Guid","newGuid","name","number","language","dialogs","isValid","Error","getFileName","Slug","slugify","ManageChapterController","$location","getFromStorage","JSON","parse","localStorage","chapter","error","saveToStorage","stringify","loadDataAsChapter","parsedData","Notifications","add","message","dialogModal","dialog","file","serializedChapterForExport","serializedChapterForVisualisation","exportedFileName","showDialogModal","copy","$","modal","saveDialog","newDialog","index","_","findIndex","push","selectDialog","updateDialogWindowVisible","deleteDialog","remove","demoDialog","importChapter","element","files","length","reader","FileReader","onload","e","result","readAsText","exportChapter","encodeURIComponent","resetChapter","updateSerializedChapterForVisualisation","undefined","$inject","list","type","NotificationsController","notifications","removeNotification","splice","guid","replace","c","r","Math","random","v","toString","text","toLowerCase","ToolbarController"],"mappings":"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","file":"dist.min.js","sourcesContent":["app = angular.module(\"WebRpgDialogMaker\", [\"ngRoute\"]);\r\n\r\napp.config(['$compileProvider', function ($compileProvider) {\r\n    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|file|data):/);\r\n}]);\r\n\r\napp.config(['$routeProvider',\r\n    function ($routeProvider) {\r\n        $routeProvider.\r\n            when('/chapters/manage', {\r\n                templateUrl: 'public/modules/chapters/manageChapter.html',\r\n                controller: 'ManageChapterController',\r\n                controllerAs: 'ManageChapter'\r\n            }).\r\n            otherwise({\r\n                redirectTo: '/chapters/manage'\r\n            });\r\n    }]);\r\n\r\n(function () {\r\n    app.controller(\"AppController\", AppController);\r\n\r\n    function AppController() {\r\n        var vm = this;\r\n        vm.appName = \"Project Chaptr\";\r\n    }\r\n})();\r\n\r\n//Default namespaces\r\napp.Data = {};\r\napp.Models = {};\r\napp.Utils = {};","app.Models.Chapter = (function () {\r\n    function Chapter(data) {\r\n        if (data) this.DataContructor(data);\r\n        else this.Constructor();\r\n    }\r\n    Chapter.prototype.Constructor = function () {\r\n        this.id = app.Data.Guid.newGuid();\r\n        this.name = null;\r\n        this.number = null;\r\n        this.language = null;\r\n        this.dialogs = [];\r\n    }\r\n    Chapter.prototype.DataContructor = function (data) {\r\n        this.id = data.id;\r\n        this.name = data.name;\r\n        this.number = data.number;\r\n        this.language = data.language;\r\n        this.dialogs = data.dialogs;\r\n    }\r\n    Chapter.prototype.isValid = function () {\r\n        if (!this.id) throw new Error(\"Missing id\");\r\n        if (!this.name) throw new Error(\"Missing name\");\r\n        if (!this.number) throw new Error(\"Missing number\");\r\n        if (!this.language) throw new Error(\"Missing language\");\r\n        if (!this.dialogs) throw new Error(\"Missing dialogs\");\r\n    }\r\n\r\n    Chapter.prototype.getFileName = function () {\r\n        return this.number + \".\" + this.language + \".\" + app.Utils.Slug.slugify(this.name) + \".json\";\r\n    }\r\n    return Chapter;\r\n})();","(function () {\r\n    app.controller(\"ManageChapterController\", ManageChapterController);\r\n    ManageChapterController.$inject = [\"$location\"];\r\n\r\n    function ManageChapterController($location) {\r\n        var vm = this;\r\n        //dialogs\r\n        vm.chapter = new app.Models.Chapter(getFromStorage());\r\n        vm.dialogModal = {\r\n            id: \"#dialogModal\",\r\n            dialog: {},\r\n        };\r\n        //export/import\r\n        vm.file = null;\r\n        vm.serializedChapterForExport = null;        \r\n        vm.serializedChapterForVisualisation = null;\r\n        vm.exportedFileName = null;\r\n        //Dialogs\r\n        vm.showDialogModal = function (dialog) {\r\n            angular.copy(dialog, vm.dialogModal.dialog);\r\n            $(vm.dialogModal.id).modal();\r\n        }\r\n\r\n        vm.saveDialog = function (dialog) {\r\n            var newDialog = {};\r\n            angular.copy(dialog, newDialog);\r\n\r\n            newDialog.id = newDialog.id || app.Utils.Guid.newGuid();\r\n\r\n            var index = _.findIndex(vm.chapter.dialogs, { id: newDialog.id });\r\n\r\n            if (index != -1) {\r\n                vm.chapter.dialogs[index] = newDialog;\r\n            }\r\n            else {\r\n                vm.chapter.dialogs.push(newDialog);\r\n            }\r\n\r\n            $(vm.dialogModal.id).modal(\"hide\");\r\n        }\r\n        vm.selectDialog = function (dialog) {\r\n            vm.updateDialogWindowVisible\r\n            angular.copy(dialog, vm.dialogModal.dialog);\r\n        }\r\n        vm.deleteDialog = function (dialog) {\r\n            _.remove(vm.chapter.dialogs, { id: dialog.id });\r\n        }\r\n        vm.demoDialog = function (dialog) {\r\n\r\n        }\r\n        //Import Export\r\n        vm.saveToStorage = function () {\r\n            saveToStorage();\r\n        }\r\n        vm.importChapter = function () {\r\n            try {\r\n                var element = angular.element(\"#toolbar-file-import\")[0];\r\n                if (element.files.length == 0) throw new Error(\"No file selected\");\r\n                var file = element.files[0];\r\n                var reader = new FileReader();\r\n\r\n                reader.onload = function (e) {\r\n                    loadDataAsChapter(reader.result);\r\n                };\r\n\r\n                reader.readAsText(file);\r\n            } catch (error) {\r\n                app.Data.Notifications.add(\"danger\", \"Impossible to import : \" + error.message);\r\n            }\r\n        }\r\n        vm.exportChapter = function () {\r\n            try {\r\n                vm.serializedChapterForExport = encodeURIComponent(JSON.stringify(vm.chapter));\r\n                vm.exportedFileName = vm.chapter.getFileName();\r\n            } catch (error) {\r\n                app.Data.Notifications.add(\"danger\", \"Error while exporting : \" + error.message);\r\n            }\r\n        }\r\n        vm.resetChapter = function(){\r\n            vm.chapter = new app.Models.Chapter();\r\n        }\r\n        vm.updateSerializedChapterForVisualisation = function () {\r\n            vm.serializedChapterForVisualisation = JSON.stringify(vm.chapter, undefined, 2);\r\n        }\r\n\r\n        function getFromStorage() {\r\n            try {\r\n                return JSON.parse(localStorage.chapter);\r\n            } catch (error) {\r\n                return null;\r\n            }\r\n        }\r\n        function saveToStorage() {\r\n            localStorage.chapter = JSON.stringify(vm.chapter);\r\n        }\r\n        function loadDataAsChapter(data) {\r\n            try {\r\n                var parsedData = JSON.parse(data);\r\n                var chapter = new app.Models.Chapter(parsedData);\r\n\r\n                chapter.isValid();\r\n                vm.chapter = chapter;\r\n                saveToStorage();\r\n            } catch (error) {\r\n                app.Data.Notifications.add(\"danger\", \"File is not valid : \" + error.message);\r\n            }\r\n        }\r\n    }\r\n})();","app.Data.Notifications = {\r\n    list: [],\r\n    add: function (type, message) {\r\n        this.list.push({\r\n            type: type,\r\n            message: message\r\n        });\r\n    }\r\n};","(function () {\r\n    app.controller(\"NotificationsController\", NotificationsController);\r\n    \r\n    function NotificationsController() {\r\n        var vm = this;\r\n\r\n        vm.notifications = app.Data.Notifications.list;\r\n        \r\n        vm.removeNotification = function (index) {\r\n            vm.notifications.splice(index, 1);\r\n        }\r\n    }\r\n})();\r\n\r\n","app.Utils.Guid = (function () {\r\n    function Guid() { }\r\n    \r\n    Guid.newGuid = function () {\r\n        var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n        return guid;\r\n    }\r\n    return Guid;\r\n})();","app.Utils.Slug = (function () {\r\n    function Slug() { }\r\n\r\n    Slug.slugify = function (text) {\r\n        return text.toString().toLowerCase()\r\n            .replace(/\\s+/g, '-')           // Replace spaces with -\r\n            .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\r\n            .replace(/\\-\\-+/g, '-')         // Replace multiple - with single -\r\n            .replace(/^-+/, '')             // Trim - from start of text\r\n            .replace(/-+$/, '');            // Trim - from end of text\r\n    }\r\n    return Slug;\r\n})();","(function () {\r\n    app.controller(\"ToolbarController\", ToolbarController);\r\n    \r\n    function ToolbarController() {\r\n        var vm = this;\r\n       \r\n    }\r\n})();"],"sourceRoot":"/source/"}